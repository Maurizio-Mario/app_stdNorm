myHist <- function(mu){}
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth = 1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE =", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(1, 2, 3, 4, 5, 6)
mean(x)
sum(x)
avg <- function(x){sum(x)/length(x)}
length(x)
avg <- function(x){sum(x)/length(x)}
avg(x)
rm(list = ls())
v <- c(1, 2, 3, 4, 5, NA, 7)
sum(v)
sum(!is.na(v))
!is.na(sum(v))
sum(v, na.rm = TRUE)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv")
View(q1)
str(q1)
q1$Price <- as.numeric(q1$Price)
str(q1)
model <- lm(Price, Level, Offensive, Defensive, data = q1)
model <- lm(Price ~ c(Level, Offensive, Defensive), data = q1)
model <- lm(Price ~ Level, data = q1)
model
model <- lm(Sales ~ c(Price, Level) , data = q1)
model <- lm(Sales ~ Price + Level + Offensive + Defensive, data = q1)
q1$Price <- as.integer(q1$Price)
model <- lm(Sales ~ Price + Level + Offensive + Defensive, data = q1)
str(q1)
model <- lm(Sales ~ Price + Level + Offensive + Defensive, data = q1)
q1$Price <- as.factor(q1$Price)
model <- lm(Sales ~ Price + Level + Offensive + Defensive, data = q1)
model <- lm(Sales ~ Price, data = q1)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv")
View(q1)
model <- lm(Sales ~ Price, data = q1)
model
model <- lm(Sales ~ Price + Level + Offensive + Defensive, data = q1)
model
summary(model)
model <- lm(Sales ~ Price, data = q1)
summary(model)
q1$Price <- as.numeric(q1$Price)
model <- lm(Sales ~ Price, data = q1)
summary(model)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv", stringsAsFactors=FALSE)
View(q1)
model <- lm(Sales ~ Price, data = q1)
summary(model)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv")
View(q1)
model <- lm(Sales ~ Price, data = q1)
model <- glm(Sales ~ Price, data = q1)
model <- glm(Price ~ Sales, data = q1)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv")
View(q1)
str(q1)
model <- glm(Price ~ Sales, data = q1)
model <- lm(Price ~ Sales, data = q1)
summary(model)
q1 <- read.csv("C:/Users/MaurizioLocale/Desktop/q1.csv")
View(q1)
rm(q1$X)
model <- lm(Price ~ Sales, data = q1)
model <- lm(Revenue ~ Sales, data = q1)
summary(model)
model <- lm(Revenue ~ Sales + Price + Level, data = q1)
model <- lm(Revenue ~ Sales + Price + Level + Offensive + Defensive, data = q1)
summary(model)
model <- lm(Revenue ~ Sales, data = q1)
summary(model)
model <- lm(Revenue ~ Sales + Price + Level + Offensive + Defensive, data = q1)
summary(model)
#data set
a <- runif(10)
b <- 2 + 3 * a + rnorm(10, mean=0, sd=sqrt(0.5))
#fit the model
my_model <- lm(b~a)
#predict() function
my_coef <- coef(my_model)
b_2 <- predict(my_model)
#use equation (2)
b_1 <- coef[1] + coef[2] * x
#compare new dara
cbind(b, b_1, b_2)
b_1 <- my_coef[1] + coef[2] * x
library(swirl)
swirl()
library(swirl)
install_from_swirl('Regression Models')
swirl()
plot(child ~  parent, galton)
plot(jitter(child, 4) ~  parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline)
abline(regrline, lwd = 3, col = "red")
summary(regrline)
rm(list = ls())
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(rhs, lhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, (varRes + varEst))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+fist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
data(galton)
library(HistData)
data(galton)
data("galton")
data("Galton")
library(UsingR)
data("galton")
data("mtcars")
library(datasets)
data(mtcars)
fit<-lm(mpg~factor(cyl)+wt, data=mtcars)
summary(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
rm(list = ls())
library(kernlab)
data(spam)
head(spam)
col = "blue", main = "", xlab = "Frequency of 'your'")
plot(density(spam$your[spam$type == "nonspam"]), col = "blue", main = "", xlab = "Frequency of 'your'")
lines(density(spam$your[spam$type == "spam"]), col = "red")
table(spam)
dim(spam)
View(spam)
abline(v = 0.5, col = "black")
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
table(prediction, spam$type) / length(spam$type)
rm(list = ls())
"kernlab" %in% rownames(installed.packages())
library(kernlab); data(spam; set.seed(333)
library(kernlab); data(spam); set.seed(333)
smallSpam <- spam[sample(dim(spam)[1], size = 10), ]
smallSpam <- spam[sample(dim(spam)[1], size = 10), ]
smallSpam <- spam[sample(dim(spam[1]), size = 10), ]
smallSpam <- spam[sample(dim(spam)[1], size = 10), ]
smallSpam <- spam[sample(dim(spam)[1], size = 10) ]
smallSpam <- spam[sample(spam[1], size = 10), ]
dim(
smallSpam <- spam[sample(dim(spam)[1], size = 10), ]
smallSpam <- spam[sample(dim(spam)[1], size = 10), ]
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(kernlab); data(spam)
dim(spam)
summary(spam)
dim(spam)
predicion <- ifelse(spam$george < 0.6 & spam$you > 1.5, "spam", "mail")
table(predicion)
prediction <- ifelse(spam$george < 0.6 & spam$you > 1.5, "spam", "mail")
rm(list = ls())
"caret" %in% rownames(installed.packages())
"lattice" %in% rownames(installed.packages())
install.packages("caret")
library(caret); library(kernlab); data(spam)
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
"installr" %in% rownames(install.packages())
"installr" %in% rownames(installed.packages())
library(installr)
updateR()
"caret" %in% rownames(installed.packages())
library(caret)
install.packages("Matrix", dependencies = TRUE)
install.packages("Matrix", dependencies = TRUE)
library(caret)
library(kernlab), data(spam)
library(kernlab); data(spam)
??createDataPartition
dim(spam)
dim(spam); names(spam)
head(spam)
vignette(spam)
vignette("kernlab")
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
dim(inTrain)
head(inTrain)
head(inTrain, 10)
tail(inTrain, 10)
dim(spam)
(4601/100)*75
training <- spam[inTrain]
testing <- spam[-inTrain]
dim(training)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
dim(training)
head(spam$type)
table(inTrain)
dim(inTrain)
inTrain[17, ]
inTrain[17]
??train
?train
args(train)
args(dim)
set.seed(32343)
modelFit <- train(type ~., data = training, method = "glm")
modelFit
dim(training)
dim(testing)
modelFit$finalModel
?predict
prediction <- predict(modelFit, newdata = testing)
prediction
confusionMatrix(prediction, testing$type)
predictions <- predict(modelFit, newdata = testing)
predictions
confusionMatrix(predictions, testing$type)
dim(spam$type)
length(spam$type)
(4061/100)*75
"ISLR" %in% rownames(installed.packages())
install.packages("ISLR")
library(ISLR)
data(Wage)
summary(Wage)
"caret" %in% rownames(installed.packages())
"ElemStatLearn" %in% rownames(installed.packages())
install.packages("ElemStatLearn")
x <- seq(1, 10, 1)
sample(x, 10, replace = T)
sample(x, 10, replace = T)
sample(x, 10, replace = T)
sample(x, 10, replace = T)
sample(1 : dim(x), replace = T)
sample(1 : dim(x)[1], replace = T)
libray(ElemStatLearn)
library(ElemStatLearn)
data("ozone")
sample(1 : dim(ozone)[1], replace = T)
x <- seq(1, 10, 1)
sample(1 : dim(ozone)[1], replace = T)
dim(ozone)
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
ll
dim(ll)
ss_test <- sample(1:dim(ozone)[1], replace = TRUE)
ss_test
ozone0_test <- ozone[ss_test,]
table(ozone0_test)
summary(ozone0_test)
ss_test <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0_test <- ozone[ss_test,]
summary(ozone0_test)
ss_test <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0_test <- ozone[ss_test,]
summary(ozone0_test)
loess0_test <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
loess0_test <- loess(temperature ~ ozone, data = ozone0_test, span = 0.2)
plot(loess0_test)
summary(ozone$ozone)
sum(unique(ozone$ozone))
unique(ozone$ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone$ozone, 1)]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone$ozone, 1)]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone$ozone, )]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone, )]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone), ]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone), ]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone0 = 1 : 155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 10){
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone), ]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone = 1 : 155))
}
loess0
dim(loess0)
data("iris")
head(iris)
head(iris[,4])
d1 <- data.frame(c(a,b,c,d,e,f))
d1 <- c(a,b,c,d,e,f))
d2 <- (a,a,a,b,b,d,d,d,d,d,e,e,f))
c1 <- data.frame(freq = c(a,b,c,d,e,f))
c2 <- data.frame(freq = c(a,a,a,b,b,d,d,d,d,d,e,e,f))
d1 %in% d2
d1 <- c(a,b,c,d,e,f)
d2 <- c(a,a,a,b,b,d,d,d,d,d,e,e,f)
d1 <- list(a,b,c,d,e,f)
x=seq(0,30)
y1=exp(-0.1*x)
plot(x,y1,type="l",lwd=2,col="chocolate1")
polygon(x,y1, density = 5, angle = 45,col="chocolate1")
polygon(c(min(x),x),c(min(y1),y1), density = 5, angle = 45,col="chocolate1")
dev.off()
polygon(c(min(x),x),c(min(y1),y1), density = 5, angle = 45,col="chocolate1")
dev.off()
x=seq(0,30)
y1=exp(-0.1*x)
plot(x,y1,type="l",lwd=2,col="chocolate1")
polygon(c(min(x),x),c(min(y1),y1), density = 5, angle = 45,col="chocolate1")
library(lattice)
e4a <- seq(60, 170, length = 10000)
e4b <- dnorm(e4a, 110, 15)
xyplot(e4b ~ e4a,
type = "l",
scales = list(x = list(at = seq(60, 170, 5)), rot = 45),
panel = function(x, ...){
panel.xyplot(x, ...)
panel.abline( v = c(110, 125, 95, 140, 80, 95), lty = 2)
})
mydata<-as.data.frame(matrix(c(140,125,120,115,110,110,110,105,100,90,85,100,140,70,100,
100,140,120,220,190,90,100,120,60,90,110,130,110,120,140,NA,65,110,50,NA,90,120,NA,130,
150,NA,60,NA,45,NA,NA,110,NA,160,NA),nrow=10,dimnames=list(c(1:10),c("IQ","Weight.year.1"
,"Weight.year.2","Weight.year.3","Weight.year.4"))))
head(head())
head(mydata)
df <- data.frame(var1 = c(1:5))
df$var2 <- c(6:10)
df
mx <- as.matrix(df)
mx
class(mx2)
mx2 <- as.matrix(df)
mx2
class(mx2)
mx2$var1
mx2[, 2]
mean(mx2[, 2])
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github(‘ramnathv/slidify’)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidifyLibraries)
library(slidify)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("stringi")
install.packages("stringi")
install_github('ramnathv/slidify')
library(devtools)
install.packages("devtools")
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github('ramnathv/slidify')
library(slidify)
install_github('ramnathv/slidifyLibraries')
library(slidify)
library(lattice)
library(lattice)
data(mtcars)
xyplot(mpg ~ wt, data = mtcars, groups = factor(am, labels = c("A","M")),
pch = 20, auto.key = list(columns = 2), type = c("p","g"))
show.settings()
rm(list = ls())
rm(list = ls())
e4a <- seq(60, 170, length = 10000)
e4b <- dnorm(e4a, 110, 15)
xyplot(e4b ~ e4a,
type = "l",
main = "Plot 4",
scales = list(x = list(at = seq(60, 170, 10)), rot = 45),
panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline( v = c(80, 95, 110), lty = 2)
xx <- c(80, x[x>=80 & x<=95], 95)
yy <- c(0,   y[x>=80 & x<=95], 0)
panel.polygon(xx,yy, ..., col='red')
})
library(lattice)
xyplot(e4b ~ e4a,
type = "l",
main = "Plot 4",
scales = list(x = list(at = seq(60, 170, 10)), rot = 45),
panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline( v = c(80, 95, 110), lty = 2)
xx <- c(80, x[x>=80 & x<=95], 95)
yy <- c(0,   y[x>=80 & x<=95], 0)
panel.polygon(xx,yy, ..., col='red')
})
xyplot(e4b ~ e4a,
z <- 100,
type = "l",
main = "Plot 4",
scales = list(x = list(at = seq(60, 170, 10)), rot = 45),
panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline(v = c(80, 95, 110), lty = 2)
xx <- c(x[x<=z], z)
yy <- c(y[x<=z], 0)
panel.polygon(xx,yy, ..., col='red')
})
my_plot <- function(z)
xyplot(e4b ~ e4a,
type = "l",
main = "Plot 4",
scales = list(x = list(at = seq(60, 170, 10)), rot = 45),
panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline(v = c(80, 95, 110), lty = 2)
xx <- c(60, x[x>=60 & x<=z], z)
yy <- c(0,   y[x>=60 & x<=z], 0)
panel.polygon(xx,yy, ..., col='red')
})
my_plot(100)
my_plot <- function(z)
xyplot(e4b ~ e4a,
type = "l",
main = "Plot 4",
scales = list(x = list(at = seq(60, 170, 10)), rot = 45),
panel = function(x,y, ...){
panel.xyplot(x,y, ...)
panel.abline(v = c(z, 110), lty = 2)
xx <- c(60, x[x>=60 & x<=z], z)
yy <- c(0, y[x>=60 & x<=z], 0)
panel.polygon(xx,yy, ..., col='red')
})
setwd("C:/Users/MaurizioLocale/Onedrive/Data_Science/Shiny_apps")
list.files()
setwd("C:/Users/MaurizioLocale/Onedrive/Data_Science/Shiny_apps/app_stdNorm")
file.edit(C("ui.r", "server.r"))
file.edit(c("ui.r", "server.r"))
library(shiny)
runApp()
shiny::runApp()
if(input$p1 == "p1"){
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
